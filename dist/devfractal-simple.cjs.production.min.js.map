{"version":3,"file":"devfractal-simple.cjs.production.min.js","sources":["../src/SimpleForm.tsx","../src/SimpleNavbar.tsx","../src/SimpleTable.tsx","../src/utils.ts","../src/SimpleArrayField.tsx","../src/SimplePager.tsx","../src/SimpleTabs.tsx"],"sourcesContent":["import {\n  CheckboxField,\n  CheckboxFieldProps,\n  consoleSubmit,\n  DateField,\n  DateFieldProps,\n  DebugField,\n  ErrorField,\n  InputField,\n  InputFieldProps,\n  RadioFieldProps,\n  RadioGroupField,\n  SelectField,\n  SelectFieldProps,\n  TextAreaField,\n  TextAreaFieldProps,\n} from 'devfractal-forms'\nimport {\n  Button,\n  ButtonsGroup,\n  ButtonsGroupProps,\n  Field,\n  FieldPropsBase,\n  Label,\n} from 'devfractal-ui-core'\nimport { Form, Formik, FormikActions, FormikConsumer } from 'formik'\nimport React from 'react'\nimport { camelCaseToPhrase } from 'technoidentity-utils'\nimport {\n  date,\n  DateSchema,\n  number,\n  NumberSchema,\n  ObjectSchema,\n  Schema,\n  string,\n  StringSchema,\n} from 'yup'\n\ntype Replace<T, K extends string & keyof T, R extends string> = Omit<T, K> &\n  { readonly [P in R]?: T[K] }\n\ntype FieldProps = Replace<FieldPropsBase, 'size', 'fieldSize'>\n\ninterface Named<Values extends {}> {\n  readonly name: Extract<keyof Values, string>\n}\n\n// @TODO: value must by typed!\ninterface SimpleInputProps<Values extends {}, S extends Schema<any>>\n  extends Omit<InputFieldProps, 'name' | 'size'>,\n    Named<Values>,\n    FieldProps {\n  readonly schema: S\n  readonly label?: string\n  readonly validations?: ReadonlyArray<(schema: S) => S>\n}\n\ninterface GenericInputProps<Values extends {}, S extends Schema<any>>\n  extends Omit<SimpleInputProps<Values, S>, 'type' | 'schema'> {}\n\n// & ValidationProps\n\nfunction validator<S extends Schema<any>>(\n  initialSchema: S,\n  validations?: ReadonlyArray<(schema: S) => S>,\n): <V>(value: V) => V | undefined {\n  return value => {\n    if (validations === undefined) {\n      return undefined\n    }\n\n    let schema: S = initialSchema\n    validations.forEach(v => (schema = v(schema)))\n\n    try {\n      schema.validateSync(value)\n      return undefined\n    } catch (err) {\n      return err.message\n    }\n  }\n}\n\nfunction splitFieldProps<T extends FieldProps>({\n  grouped,\n  addons,\n  horizontal,\n  groupedMultiline,\n  groupModifier,\n  addonsModifier,\n  fieldSize,\n  ...rest\n}: // tslint:disable-next-line: readonly-array\nT): [FieldPropsBase, Omit<T, keyof FieldProps>] {\n  return [\n    {\n      grouped,\n      addons,\n      horizontal,\n      groupedMultiline,\n      groupModifier,\n      addonsModifier,\n      size: fieldSize,\n    },\n    rest,\n  ]\n}\nfunction SimpleInput<Values extends {}, S extends Schema<any>>(\n  args: SimpleInputProps<Values, S>,\n): JSX.Element {\n  const [fieldProps, rest] = splitFieldProps(args)\n  const { schema, label, validations, ...props } = rest\n  return (\n    <Field {...fieldProps}>\n      <Label>{label || camelCaseToPhrase(props.name)}</Label>\n      <InputField {...props} validate={validator(schema, validations)} />\n      <ErrorField name={props.name} />\n    </Field>\n  )\n}\n\ninterface SimpleDateProps<Values extends {}>\n  extends Omit<DateFieldProps, 'name' | 'size'>,\n    Named<Values>,\n    FieldProps {\n  readonly validations?: ReadonlyArray<(schema: DateSchema) => DateSchema>\n  readonly label?: string\n}\n\nfunction SimpleDate<Values extends {}>(\n  args: SimpleDateProps<Values>,\n): JSX.Element {\n  const [fieldProps, rest] = splitFieldProps(args)\n  const { label, validations, ...props } = rest\n  return (\n    <Field {...fieldProps}>\n      <Label>{label || camelCaseToPhrase(props.name)}</Label>\n      <DateField {...props} validate={validator(date(), validations)} />\n      <ErrorField name={props.name} />\n    </Field>\n  )\n}\n\nexport interface SimpleCheckboxProps<Values extends {}>\n  extends Omit<CheckboxFieldProps, 'name' | 'size'>,\n    Named<Values>,\n    FieldProps {\n  readonly noLabel?: boolean\n}\n\nexport interface SimpleRadioGroupProps<Values extends {}>\n  extends Omit<RadioFieldProps, 'name' | 'size'>,\n    Named<Values>,\n    FieldProps {\n  readonly label?: string\n}\n\nexport interface SimpleSelectProps<Values extends {}>\n  extends Omit<SelectFieldProps, 'name' | 'size'>,\n    Named<Values>,\n    FieldProps {\n  readonly label?: string\n}\n\nexport interface SimpleTextAreaProps<Values extends {}>\n  extends Omit<TextAreaFieldProps, 'name' | 'size'>,\n    Named<Values>,\n    FieldProps {\n  readonly label?: string\n}\n\nexport interface SimpleFormButtonsProps extends ButtonsGroupProps {\n  readonly submit?: boolean | string\n  readonly reset?: boolean | string\n}\n\nconst SimpleFormButtons: React.FC<SimpleFormButtonsProps> = ({\n  submit = 'Submit',\n  reset = 'Reset',\n  ...props\n}) => (\n  <FormikConsumer>\n    {({ dirty, isSubmitting, handleReset }) => (\n      <ButtonsGroup {...props}>\n        {submit !== false && (\n          <Button\n            type=\"submit\"\n            variant=\"info\"\n            disabled={isSubmitting}\n            noControl\n          >\n            {submit}\n          </Button>\n        )}\n        {reset !== false && (\n          <Button\n            disabled={!dirty || isSubmitting}\n            variant=\"danger\"\n            type=\"reset\"\n            onClick={handleReset}\n            noControl\n          >\n            {reset}\n          </Button>\n        )}\n      </ButtonsGroup>\n    )}\n  </FormikConsumer>\n)\n\nexport interface SimpleFormProps<Values> {\n  readonly initialValues: Values\n  readonly validationSchema?: ObjectSchema<Partial<Values>>\n  onSubmit?(values: Values, actions: FormikActions<Values>): void\n}\n\nexport interface TypedForm<Values extends {}> {\n  readonly Text: React.FC<GenericInputProps<Values, StringSchema>>\n  readonly Date: React.FC<SimpleDateProps<Values>>\n  readonly Number: React.FC<GenericInputProps<Values, NumberSchema>>\n  readonly Password: React.FC<GenericInputProps<Values, StringSchema>>\n  readonly Email: React.FC<GenericInputProps<Values, StringSchema>>\n  readonly Checkbox: React.FC<SimpleCheckboxProps<Values>>\n  readonly Telephone: React.FC<GenericInputProps<Values, NumberSchema>>\n  readonly Url: React.FC<GenericInputProps<Values, StringSchema>>\n  readonly RadioGroup: React.FC<SimpleRadioGroupProps<Values>>\n  readonly TextArea: React.FC<SimpleTextAreaProps<Values>>\n  readonly Select: React.FC<SimpleSelectProps<Values>>\n  readonly Form: React.FC<SimpleFormProps<Values>>\n}\n\nexport function typedForm<Values extends {}>(): TypedForm<Values> {\n  return {\n    Text: props => <SimpleInput {...props} type=\"text\" schema={string()} />,\n    Date: props => <SimpleDate {...props} />,\n    Number: props => <SimpleInput schema={number()} {...props} type=\"number\" />,\n\n    Password: props => (\n      <SimpleInput schema={string()} {...props} type=\"password\" />\n    ),\n\n    Email: props => <SimpleInput {...props} type=\"email\" schema={string()} />,\n\n    // @TODO: I think Telephone shouldn't be no?\n    Telephone: props => <SimpleInput schema={number()} {...props} type=\"tel\" />,\n\n    Url: props => <SimpleInput schema={string()} {...props} type=\"url\" />,\n\n    Checkbox: ({ children, noLabel, ...args }) => {\n      const [fieldProps, props] = splitFieldProps(args)\n      return (\n        <Field {...fieldProps}>\n          <Label>\n            {children || (!noLabel && ` ${camelCaseToPhrase(props.name)}`)}\n          </Label>\n          <CheckboxField {...props} />\n          <ErrorField name={props.name} />\n        </Field>\n      )\n    },\n\n    RadioGroup: ({ children, label, ...args }) => {\n      const [fieldProps, props] = splitFieldProps(args)\n      return (\n        <Field {...fieldProps}>\n          <Label>{label || camelCaseToPhrase(props.name)}</Label>\n          <RadioGroupField {...props}>{children}</RadioGroupField>\n          <ErrorField name={props.name} />\n        </Field>\n      )\n    },\n\n    Select: ({ children, label, ...args }) => {\n      const [fieldProps, props] = splitFieldProps(args)\n      return (\n        <Field {...fieldProps}>\n          <Label>{label || camelCaseToPhrase(props.name)}</Label>\n          <SelectField {...props}>{children}</SelectField>\n          <ErrorField name={props.name} />\n        </Field>\n      )\n    },\n\n    TextArea: ({ label, ...args }) => {\n      const [fieldProps, props] = splitFieldProps(args)\n      return (\n        <Field {...fieldProps}>\n          <Label>{label || camelCaseToPhrase(props.name)}</Label>\n          <TextAreaField {...props} />\n          <ErrorField name={props.name} />\n        </Field>\n      )\n    },\n    Form: ({\n      initialValues,\n      validationSchema,\n      onSubmit = consoleSubmit<Values>(0),\n      children,\n    }) => (\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n      >\n        <Form>{children}</Form>\n      </Formik>\n    ),\n  }\n}\n\n// tslint:disable-next-line:typedef\nexport const Simple = {\n  ...typedForm<{ readonly [s: string]: any }>(),\n  FormButtons: SimpleFormButtons,\n  Debug: DebugField,\n}\n","import {\n  Navbar,\n  NavbarBrand,\n  NavbarBrandProps,\n  NavbarBurger,\n  NavbarBurgerProps,\n  NavbarEnd,\n  NavbarItem,\n  NavbarItemsProps,\n  NavbarMenu,\n} from 'devfractal-ui-core'\nimport React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nconst NavBurger: React.FC<NavbarBurgerProps> = props => (\n  <NavbarBurger role=\"button\" {...props}>\n    <span aria-hidden=\"true\" />\n    <span aria-hidden=\"true\" />\n    <span aria-hidden=\"true\" />\n  </NavbarBurger>\n)\n\nconst NavBrand: React.FC<NavbarBrandProps> = ({ children, ...props }) => (\n  <NavbarBrand {...props}>\n    <NavLink to=\"/\">{children}</NavLink>\n    <NavBurger />\n  </NavbarBrand>\n)\n\nconst NavItem: React.FC<NavbarItemsProps & { readonly to: string }> = ({\n  to,\n  children,\n  ...props\n}) => (\n  <NavbarItem {...props}>\n    <NavLink to={to}>{children}</NavLink>\n  </NavbarItem>\n)\n\nexport {\n  NavBrand,\n  NavItem,\n  Navbar as Nav,\n  NavbarEnd as NavEnd,\n  NavbarMenu as NavMenu,\n}\n","import { Get } from 'devfractal-ui-api'\nimport {\n  CheckBox,\n  Table,\n  TableBody,\n  TableHead,\n  TableProps,\n  Td,\n  Text,\n  Th,\n  Tr,\n} from 'devfractal-ui-core'\nimport React from 'react'\nimport * as t from 'technoidentity-utils'\nimport { camelCaseToPhrase, date } from 'technoidentity-utils'\nimport { formatDate } from './utils'\n\nexport interface SimpleTableHeaderProps {\n  readonly headers: readonly string[]\n}\n\nexport const SimpleTableHeader: React.FC<SimpleTableHeaderProps> = ({\n  headers,\n}) => (\n  <TableHead>\n    <Tr>\n      {headers.map(h => (\n        <Th key={h}>{h}</Th>\n      ))}\n    </Tr>\n  </TableHead>\n)\n\nexport interface RowClickEvent<T extends Record<string, any>> {\n  readonly value: T\n}\n\nexport interface RowsProps<\n  T extends Record<string, any>,\n  EK extends string,\n  Select extends keyof T\n> extends Omit<TableViewProps<T, EK, Select>, 'override'> {\n  readonly select: ReadonlyArray<Select>\n  render?(keyOrHeader: string, value: T): React.ReactNode\n}\n\nfunction Rows<\n  T extends Record<string, any>,\n  EK extends string,\n  Select extends keyof T\n>(props: RowsProps<T, EK, Select>): JSX.Element {\n  const { data, select, extra, render, onRowClicked } = props\n\n  return (\n    <>\n      {data.map((value, i) => (\n        <Tr\n          key={i}\n          onClick={() => onRowClicked && onRowClicked({ value: data[i] })}\n        >\n          {select.map(h => (\n            <Td key={h as string}>\n              {date.is(value[h]) ? (\n                <>{formatDate(value[h])}</>\n              ) : t.boolean.is(value[h]) ? (\n                <CheckBox readOnly checked={value[h]} />\n              ) : value[h] !== undefined ? (\n                value[h]\n              ) : (\n                render && render(h as string, value)\n              )}\n            </Td>\n          ))}\n          {extra &&\n            extra.map(e => render && <Td key={e}>{render(e, value)}</Td>)}\n        </Tr>\n      ))}\n    </>\n  )\n}\n\nexport interface TableViewProps<\n  T extends Record<string, any>,\n  EK extends string,\n  Select extends keyof T = keyof T\n> extends SimpleTableProps<T, EK, Select> {\n  readonly data: ReadonlyArray<T>\n}\n\nfunction TableView<\n  T extends Record<string, any>,\n  Select extends keyof T,\n  EK extends string\n>(args: TableViewProps<T, EK, Select>): JSX.Element {\n  const {\n    select,\n    override,\n    extra,\n    data,\n    onRowClicked,\n    children,\n    ...props\n  } = args\n\n  if (data.length === 0) {\n    return <Text textSize=\"3\">No Values</Text>\n  }\n\n  const keys: ReadonlyArray<keyof T> =\n    select === undefined ? Object.keys(data[0]) : select\n\n  const labels: readonly string[] = [\n    ...keys.map(s =>\n      override && s in override\n        ? override[s as string]\n        : camelCaseToPhrase(s as string),\n    ),\n    ...(extra || []),\n  ]\n\n  return (\n    <Table {...props} fullWidth>\n      <SimpleTableHeader headers={labels} />\n\n      <TableBody>\n        <Rows\n          data={data}\n          select={keys}\n          extra={extra}\n          onRowClicked={onRowClicked}\n          render={children}\n        />\n      </TableBody>\n    </Table>\n  )\n}\n\nexport interface SimpleTableProps<\n  T extends Record<string, any>,\n  EK extends string,\n  Select extends keyof T = keyof T\n> extends TableProps {\n  readonly select?: ReadonlyArray<Select>\n  readonly override?: Partial<Record<Select, string>>\n  readonly extra?: readonly EK[]\n  readonly data: ReadonlyArray<T> | (() => Promise<ReadonlyArray<T>>)\n  onRowClicked?(value: RowClickEvent<T>): void\n  children?(key: keyof T | EK, value: T): React.ReactNode\n}\n\nexport function SimpleTable<\n  T extends Record<string, any>,\n  EK extends string,\n  Select extends keyof T = keyof T\n>(args: SimpleTableProps<T, EK, Select>): JSX.Element {\n  const { data, ...props } = args\n\n  return typeof data === 'function' ? (\n    <Get asyncFn={data}>{data => <TableView {...props} data={data} />}</Get>\n  ) : (\n    <TableView data={data} {...props} />\n  )\n}\n","import { format } from 'date-fns'\n\nexport function formatDate(date: Date | undefined): string | undefined {\n  return date && format(date, 'dd/MM/yyyy')\n}\n","import {\n  Button,\n  Delete,\n  Field,\n  Notification,\n} from 'devfractal-ui-core'\nimport { FieldArray } from 'formik'\nimport React from 'react'\n\nexport interface SimpleArrayFieldComponentProps<T> {\n  readonly name: string\n  readonly data: T\n  readonly index: number\n}\n\nexport interface SimpleArrayFieldProps<T> {\n  readonly name: string\n  readonly data: ReadonlyArray<T>\n  readonly noRemove?: boolean\n  readonly render: React.FC<SimpleArrayFieldComponentProps<T>>\n  onAdd?(): T\n}\n\nexport function SimpleArrayField<T>({\n  name,\n  data,\n  noRemove,\n  onAdd,\n  render: Component,\n}: SimpleArrayFieldProps<T>): JSX.Element {\n  return (\n    <FieldArray name={name}>\n      {({ unshift, remove }) => (\n        <>\n          {onAdd && (\n            <Field addonsModifier=\"addons-right\">\n              <Button variant=\"success\" onClick={() => unshift(onAdd())}>\n                Add\n              </Button>\n            </Field>\n          )}\n          {data.map((v, i) => (\n            <Notification key={i}>\n              {noRemove || <Delete onClick={() => remove(i)} />}\n              <Component name={`${name}[${i}]`} index={i} data={v} />\n            </Notification>\n          ))}\n        </>\n      )}\n    </FieldArray>\n  )\n}\n","import {\n  faAngleDoubleLeft,\n  faAngleDoubleRight,\n  faStepBackward,\n  faStepForward,\n} from '@fortawesome/free-solid-svg-icons'\nimport { Button, Field, Icon, Section } from 'devfractal-ui-core'\nimport React from 'react'\n\ninterface PagerViewProps {\n  readonly currentPage: number\n  readonly maximumPages: number\n  onPageChange(nextPage: number): void\n}\n\nexport const SimplePagerView: React.FC<PagerViewProps> = ({\n  currentPage,\n  maximumPages,\n  onPageChange,\n}) => (\n  <Section>\n    <Field groupModifier=\"grouped-right\">\n      <Button\n        variant=\"white\"\n        disabled={currentPage === 1}\n        onClick={() => onPageChange(1)}\n      >\n        <Icon icon={faStepBackward} />\n      </Button>\n      <Button\n        variant=\"white\"\n        disabled={currentPage === 1}\n        onClick={() => onPageChange(currentPage - 1)}\n      >\n        <Icon icon={faAngleDoubleLeft} />\n      </Button>\n      <Button\n        variant=\"white\"\n        disabled={currentPage === maximumPages}\n        onClick={() => onPageChange(currentPage + 1)}\n      >\n        <Icon icon={faAngleDoubleRight} />\n      </Button>\n      <Button\n        variant=\"white\"\n        disabled={currentPage === maximumPages}\n        onClick={() => onPageChange(maximumPages)}\n      >\n        <Icon icon={faStepForward} />\n      </Button>\n    </Field>\n  </Section>\n)\n","import {\n  RoutedTabs,\n  RoutedTabsItem,\n  RoutedTabsProps,\n  Tabs,\n  TabsItem,\n  TabsProps,\n} from 'devfractal-ui'\nimport React from 'react'\nimport { camelCaseToPhrase } from 'technoidentity-utils'\n\nexport interface SimpleTabsProps extends Omit<TabsProps, 'selectedTab'> {\n  readonly name?: string\n  readonly values?: readonly string[]\n}\n\nexport const SimpleTabs: React.FC<SimpleTabsProps> = ({\n  name,\n  values = [],\n  ...props\n}) => {\n  const [value, set] = React.useState(values[0])\n  return (\n    <Tabs\n      {...props}\n      value={value}\n      onChange={evt => {\n        if (evt.value) {\n          set(evt.value)\n        }\n        if (props.onChange) {\n          props.onChange(evt)\n        }\n      }}\n      name={name}\n    >\n      {values.map(value => (\n        <TabsItem key={value} value={value}>\n          {camelCaseToPhrase(value)}\n        </TabsItem>\n      ))}\n    </Tabs>\n  )\n}\n\nexport interface SimpleRoutedTabsProps\n  extends Omit<RoutedTabsProps, 'selectedTab'> {\n  readonly name?: string\n  readonly values?: readonly string[]\n}\n\nexport const SimpleRoutedTabs: React.FC<SimpleRoutedTabsProps> = ({\n  values = [],\n  ...props\n}) => (\n  <RoutedTabs {...props}>\n    {values.map(value => (\n      <RoutedTabsItem key={value} value={value}>\n        {camelCaseToPhrase(value)}\n      </RoutedTabsItem>\n    ))}\n  </RoutedTabs>\n)\n"],"names":["validator","initialSchema","validations","value","undefined","schema","forEach","v","validateSync","err","message","splitFieldProps","grouped","addons","horizontal","groupedMultiline","groupModifier","addonsModifier","size","fieldSize","SimpleInput","args","fieldProps","rest","label","props","React","Field","Label","camelCaseToPhrase","name","InputField","validate","ErrorField","SimpleDate","DateField","date","typedForm","Text","type","string","Date","Number","number","Password","Email","Telephone","Url","Checkbox","children","noLabel","CheckboxField","RadioGroup","RadioGroupField","Select","SelectField","TextArea","TextAreaField","Form","initialValues","validationSchema","onSubmit","consoleSubmit","Formik","Simple","_extends","FormButtons","submit","reset","FormikConsumer","dirty","isSubmitting","handleReset","ButtonsGroup","Button","variant","disabled","noControl","onClick","Debug","DebugField","NavBurger","NavbarBurger","role","SimpleTableHeader","TableHead","Tr","headers","map","h","Th","key","Rows","data","select","extra","render","onRowClicked","i","Td","is","format","t","CheckBox","readOnly","checked","e","TableView","override","length","textSize","keys","Object","labels","s","Table","fullWidth","TableBody","NavbarBrand","NavLink","to","NavbarItem","noRemove","onAdd","Component","FieldArray","unshift","remove","Notification","Delete","index","currentPage","maximumPages","onPageChange","Section","Icon","icon","faStepBackward","faAngleDoubleLeft","faAngleDoubleRight","faStepForward","values","RoutedTabs","RoutedTabsItem","Get","asyncFn","useState","set","Tabs","onChange","evt","TabsItem"],"mappings":"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"}