{"version":3,"file":"devfractal-simple.esm.js","sources":["../src/SimpleArrayField.tsx","../src/SimpleForm.tsx","../src/SimpleNavbar.tsx","../src/SimplePager.tsx","../src/utils.ts","../src/SimpleTable.tsx","../src/SimpleTabs.tsx"],"sourcesContent":["import {\n  Button,\n  Delete,\n  Field,\n  Notification,\n} from 'devfractal-ui-core'\nimport { FieldArray } from 'formik'\nimport React from 'react'\n\nexport interface SimpleArrayFieldComponentProps<T> {\n  readonly name: string\n  readonly data: T\n  readonly index: number\n}\n\nexport interface SimpleArrayFieldProps<T> {\n  readonly name: string\n  readonly data: ReadonlyArray<T>\n  readonly noRemove?: boolean\n  readonly render: React.FC<SimpleArrayFieldComponentProps<T>>\n  onAdd?(): T\n}\n\nexport function SimpleArrayField<T>({\n  name,\n  data,\n  noRemove,\n  onAdd,\n  render: Component,\n}: SimpleArrayFieldProps<T>): JSX.Element {\n  return (\n    <FieldArray name={name}>\n      {({ unshift, remove }) => (\n        <>\n          {onAdd && (\n            <Field addonsModifier=\"addons-right\">\n              <Button variant=\"success\" onClick={() => unshift(onAdd())}>\n                Add\n              </Button>\n            </Field>\n          )}\n          {data.map((v, i) => (\n            <Notification key={i}>\n              {noRemove || <Delete onClick={() => remove(i)} />}\n              <Component name={`${name}[${i}]`} index={i} data={v} />\n            </Notification>\n          ))}\n        </>\n      )}\n    </FieldArray>\n  )\n}\n","import {\n  CheckboxField,\n  CheckboxFieldProps,\n  consoleSubmit,\n  DateField,\n  DateFieldProps,\n  DebugField,\n  ErrorField,\n  InputField,\n  InputFieldProps,\n  RadioFieldProps,\n  RadioGroupField,\n  SelectField,\n  SelectFieldProps,\n  TextAreaField,\n  TextAreaFieldProps,\n} from 'devfractal-forms'\nimport {\n  Button,\n  ButtonsGroup,\n  ButtonsGroupProps,\n  Field,\n  FieldPropsBase,\n  Label,\n} from 'devfractal-ui-core'\nimport { Form, Formik, FormikActions, FormikConsumer } from 'formik'\nimport React from 'react'\nimport { camelCaseToPhrase } from 'technoidentity-utils'\nimport {\n  date,\n  DateSchema,\n  number,\n  NumberSchema,\n  ObjectSchema,\n  Schema,\n  string,\n  StringSchema,\n} from 'yup'\n\ntype Replace<T, K extends string & keyof T, R extends string> = Omit<T, K> &\n  { readonly [P in R]?: T[K] }\n\ntype FieldProps = Replace<FieldPropsBase, 'size', 'fieldSize'>\n\ninterface Named<Values extends {}> {\n  readonly name: Extract<keyof Values, string>\n}\n\n// @TODO: value must by typed!\ninterface SimpleInputProps<Values extends {}, S extends Schema<any>>\n  extends Omit<InputFieldProps, 'name' | 'size'>,\n    Named<Values>,\n    FieldProps {\n  readonly schema: S\n  readonly label?: string\n  readonly validations?: ReadonlyArray<(schema: S) => S>\n}\n\ninterface GenericInputProps<Values extends {}, S extends Schema<any>>\n  extends Omit<SimpleInputProps<Values, S>, 'type' | 'schema'> {}\n\n// & ValidationProps\n\nfunction validator<S extends Schema<any>>(\n  initialSchema: S,\n  validations?: ReadonlyArray<(schema: S) => S>,\n): <V>(value: V) => V | undefined {\n  return value => {\n    if (validations === undefined) {\n      return undefined\n    }\n\n    let schema: S = initialSchema\n    validations.forEach(v => (schema = v(schema)))\n\n    try {\n      schema.validateSync(value)\n      return undefined\n    } catch (err) {\n      return err.message\n    }\n  }\n}\n\nfunction splitFieldProps<T extends FieldProps>({\n  grouped,\n  addons,\n  horizontal,\n  groupedMultiline,\n  groupModifier,\n  addonsModifier,\n  fieldSize,\n  ...rest\n}: // tslint:disable-next-line: readonly-array\nT): [FieldPropsBase, Omit<T, keyof FieldProps>] {\n  return [\n    {\n      grouped,\n      addons,\n      horizontal,\n      groupedMultiline,\n      groupModifier,\n      addonsModifier,\n      size: fieldSize,\n    },\n    rest,\n  ]\n}\nfunction SimpleInput<Values extends {}, S extends Schema<any>>(\n  args: SimpleInputProps<Values, S>,\n): JSX.Element {\n  const [fieldProps, rest] = splitFieldProps(args)\n  const { schema, label, validations, ...props } = rest\n  return (\n    <Field {...fieldProps}>\n      <Label>{label || camelCaseToPhrase(props.name)}</Label>\n      <InputField {...props} validate={validator(schema, validations)} />\n      <ErrorField name={props.name} />\n    </Field>\n  )\n}\n\ninterface SimpleDateProps<Values extends {}>\n  extends Omit<DateFieldProps, 'name' | 'size'>,\n    Named<Values>,\n    FieldProps {\n  readonly validations?: ReadonlyArray<(schema: DateSchema) => DateSchema>\n  readonly label?: string\n}\n\nfunction SimpleDate<Values extends {}>(\n  args: SimpleDateProps<Values>,\n): JSX.Element {\n  const [fieldProps, rest] = splitFieldProps(args)\n  const { label, validations, ...props } = rest\n  return (\n    <Field {...fieldProps}>\n      <Label>{label || camelCaseToPhrase(props.name)}</Label>\n      <DateField {...props} validate={validator(date(), validations)} />\n      <ErrorField name={props.name} />\n    </Field>\n  )\n}\n\nexport interface SimpleCheckboxProps<Values extends {}>\n  extends Omit<CheckboxFieldProps, 'name' | 'size'>,\n    Named<Values>,\n    FieldProps {\n  readonly noLabel?: boolean\n}\n\nexport interface SimpleRadioGroupProps<Values extends {}>\n  extends Omit<RadioFieldProps, 'name' | 'size'>,\n    Named<Values>,\n    FieldProps {\n  readonly label?: string\n}\n\nexport interface SimpleSelectProps<Values extends {}>\n  extends Omit<SelectFieldProps, 'name' | 'size'>,\n    Named<Values>,\n    FieldProps {\n  readonly label?: string\n}\n\nexport interface SimpleTextAreaProps<Values extends {}>\n  extends Omit<TextAreaFieldProps, 'name' | 'size'>,\n    Named<Values>,\n    FieldProps {\n  readonly label?: string\n}\n\nexport interface SimpleFormButtonsProps extends ButtonsGroupProps {\n  readonly submit?: boolean | string\n  readonly reset?: boolean | string\n}\n\nconst SimpleFormButtons: React.FC<SimpleFormButtonsProps> = ({\n  submit = 'Submit',\n  reset = 'Reset',\n  ...props\n}) => (\n  <FormikConsumer>\n    {({ dirty, isSubmitting, handleReset }) => (\n      <ButtonsGroup {...props}>\n        {submit !== false && (\n          <Button\n            type=\"submit\"\n            variant=\"info\"\n            disabled={isSubmitting}\n            noControl\n          >\n            {submit}\n          </Button>\n        )}\n        {reset !== false && (\n          <Button\n            disabled={!dirty || isSubmitting}\n            variant=\"danger\"\n            type=\"reset\"\n            onClick={handleReset}\n            noControl\n          >\n            {reset}\n          </Button>\n        )}\n      </ButtonsGroup>\n    )}\n  </FormikConsumer>\n)\n\nexport interface SimpleFormProps<Values> {\n  readonly initialValues: Values\n  readonly validationSchema?: ObjectSchema<Partial<Values>>\n  onSubmit?(values: Values, actions: FormikActions<Values>): void\n}\n\nexport interface TypedForm<Values extends {}> {\n  readonly Text: React.FC<GenericInputProps<Values, StringSchema>>\n  readonly Date: React.FC<SimpleDateProps<Values>>\n  readonly Number: React.FC<GenericInputProps<Values, NumberSchema>>\n  readonly Password: React.FC<GenericInputProps<Values, StringSchema>>\n  readonly Email: React.FC<GenericInputProps<Values, StringSchema>>\n  readonly Checkbox: React.FC<SimpleCheckboxProps<Values>>\n  readonly Telephone: React.FC<GenericInputProps<Values, NumberSchema>>\n  readonly Url: React.FC<GenericInputProps<Values, StringSchema>>\n  readonly RadioGroup: React.FC<SimpleRadioGroupProps<Values>>\n  readonly TextArea: React.FC<SimpleTextAreaProps<Values>>\n  readonly Select: React.FC<SimpleSelectProps<Values>>\n  readonly Form: React.FC<SimpleFormProps<Values>>\n}\n\nexport function typedForm<Values extends {}>(): TypedForm<Values> {\n  return {\n    Text: props => <SimpleInput {...props} type=\"text\" schema={string()} />,\n    Date: props => <SimpleDate {...props} />,\n    Number: props => <SimpleInput schema={number()} {...props} type=\"number\" />,\n\n    Password: props => (\n      <SimpleInput schema={string()} {...props} type=\"password\" />\n    ),\n\n    Email: props => <SimpleInput {...props} type=\"email\" schema={string()} />,\n\n    // @TODO: I think Telephone shouldn't be no?\n    Telephone: props => <SimpleInput schema={number()} {...props} type=\"tel\" />,\n\n    Url: props => <SimpleInput schema={string()} {...props} type=\"url\" />,\n\n    Checkbox: ({ children, noLabel, ...args }) => {\n      const [fieldProps, props] = splitFieldProps(args)\n      return (\n        <Field {...fieldProps}>\n          <Label>\n            {children || (!noLabel && ` ${camelCaseToPhrase(props.name)}`)}\n          </Label>\n          <CheckboxField {...props} />\n          <ErrorField name={props.name} />\n        </Field>\n      )\n    },\n\n    RadioGroup: ({ children, label, ...args }) => {\n      const [fieldProps, props] = splitFieldProps(args)\n      return (\n        <Field {...fieldProps}>\n          <Label>{label || camelCaseToPhrase(props.name)}</Label>\n          <RadioGroupField {...props}>{children}</RadioGroupField>\n          <ErrorField name={props.name} />\n        </Field>\n      )\n    },\n\n    Select: ({ children, label, ...args }) => {\n      const [fieldProps, props] = splitFieldProps(args)\n      return (\n        <Field {...fieldProps}>\n          <Label>{label || camelCaseToPhrase(props.name)}</Label>\n          <SelectField {...props}>{children}</SelectField>\n          <ErrorField name={props.name} />\n        </Field>\n      )\n    },\n\n    TextArea: ({ label, ...args }) => {\n      const [fieldProps, props] = splitFieldProps(args)\n      return (\n        <Field {...fieldProps}>\n          <Label>{label || camelCaseToPhrase(props.name)}</Label>\n          <TextAreaField {...props} />\n          <ErrorField name={props.name} />\n        </Field>\n      )\n    },\n    Form: ({\n      initialValues,\n      validationSchema,\n      onSubmit = consoleSubmit<Values>(0),\n      children,\n    }) => (\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n      >\n        <Form>{children}</Form>\n      </Formik>\n    ),\n  }\n}\n\n// tslint:disable-next-line:typedef\nexport const Simple = {\n  ...typedForm<{ readonly [s: string]: any }>(),\n  FormButtons: SimpleFormButtons,\n  Debug: DebugField,\n}\n","import {\n  Navbar,\n  NavbarBrand,\n  NavbarBrandProps,\n  NavbarBurger,\n  NavbarBurgerProps,\n  NavbarEnd,\n  NavbarItem,\n  NavbarItemsProps,\n  NavbarMenu,\n} from 'devfractal-ui-core'\nimport React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nconst NavBurger: React.FC<NavbarBurgerProps> = props => (\n  <NavbarBurger role=\"button\" {...props}>\n    <span aria-hidden=\"true\" />\n    <span aria-hidden=\"true\" />\n    <span aria-hidden=\"true\" />\n  </NavbarBurger>\n)\n\nconst NavBrand: React.FC<NavbarBrandProps> = ({ children, ...props }) => (\n  <NavbarBrand {...props}>\n    <NavLink to=\"/\">{children}</NavLink>\n    <NavBurger />\n  </NavbarBrand>\n)\n\nconst NavItem: React.FC<NavbarItemsProps & { readonly to: string }> = ({\n  to,\n  children,\n  ...props\n}) => (\n  <NavbarItem {...props}>\n    <NavLink to={to}>{children}</NavLink>\n  </NavbarItem>\n)\n\nexport {\n  NavBrand,\n  NavItem,\n  Navbar as Nav,\n  NavbarEnd as NavEnd,\n  NavbarMenu as NavMenu,\n}\n","import {\n  faAngleDoubleLeft,\n  faAngleDoubleRight,\n  faStepBackward,\n  faStepForward,\n} from '@fortawesome/free-solid-svg-icons'\nimport { Button, Field, Icon, Section } from 'devfractal-ui-core'\nimport React from 'react'\n\ninterface PagerViewProps {\n  readonly currentPage: number\n  readonly maximumPages: number\n  onPageChange(nextPage: number): void\n}\n\nexport const SimplePagerView: React.FC<PagerViewProps> = ({\n  currentPage,\n  maximumPages,\n  onPageChange,\n}) => (\n  <Section>\n    <Field groupModifier=\"grouped-right\">\n      <Button\n        variant=\"white\"\n        disabled={currentPage === 1}\n        onClick={() => onPageChange(1)}\n      >\n        <Icon icon={faStepBackward} />\n      </Button>\n      <Button\n        variant=\"white\"\n        disabled={currentPage === 1}\n        onClick={() => onPageChange(currentPage - 1)}\n      >\n        <Icon icon={faAngleDoubleLeft} />\n      </Button>\n      <Button\n        variant=\"white\"\n        disabled={currentPage === maximumPages}\n        onClick={() => onPageChange(currentPage + 1)}\n      >\n        <Icon icon={faAngleDoubleRight} />\n      </Button>\n      <Button\n        variant=\"white\"\n        disabled={currentPage === maximumPages}\n        onClick={() => onPageChange(maximumPages)}\n      >\n        <Icon icon={faStepForward} />\n      </Button>\n    </Field>\n  </Section>\n)\n","import { format } from 'date-fns'\n\nexport function formatDate(date: Date | undefined): string | undefined {\n  return date && format(date, 'dd/MM/yyyy')\n}\n","import { Get } from 'devfractal-ui-api'\nimport {\n  CheckBox,\n  Table,\n  TableBody,\n  TableHead,\n  TableProps,\n  Td,\n  Text,\n  Th,\n  Tr,\n} from 'devfractal-ui-core'\nimport React from 'react'\nimport * as t from 'technoidentity-utils'\nimport { camelCaseToPhrase, date } from 'technoidentity-utils'\nimport { formatDate } from './utils'\n\nexport interface SimpleTableHeaderProps {\n  readonly headers: readonly string[]\n}\n\nexport const SimpleTableHeader: React.FC<SimpleTableHeaderProps> = ({\n  headers,\n}) => (\n  <TableHead>\n    <Tr>\n      {headers.map(h => (\n        <Th key={h}>{h}</Th>\n      ))}\n    </Tr>\n  </TableHead>\n)\n\nexport interface RowClickEvent<T extends Record<string, any>> {\n  readonly value: T\n}\n\nexport interface RowsProps<\n  T extends Record<string, any>,\n  EK extends string,\n  Select extends keyof T\n> extends Omit<TableViewProps<T, EK, Select>, 'override'> {\n  readonly select: ReadonlyArray<Select>\n  render?(keyOrHeader: string, value: T): React.ReactNode\n}\n\nfunction Rows<\n  T extends Record<string, any>,\n  EK extends string,\n  Select extends keyof T\n>(props: RowsProps<T, EK, Select>): JSX.Element {\n  const { data, select, extra, render, onRowClicked } = props\n\n  return (\n    <>\n      {data.map((value, i) => (\n        <Tr\n          key={i}\n          onClick={() => onRowClicked && onRowClicked({ value: data[i] })}\n        >\n          {select.map(h => (\n            <Td key={h as string}>\n              {date.is(value[h]) ? (\n                <>{formatDate(value[h])}</>\n              ) : t.boolean.is(value[h]) ? (\n                <CheckBox readOnly checked={value[h]} />\n              ) : value[h] !== undefined ? (\n                value[h]\n              ) : (\n                render && render(h as string, value)\n              )}\n            </Td>\n          ))}\n          {extra &&\n            extra.map(e => render && <Td key={e}>{render(e, value)}</Td>)}\n        </Tr>\n      ))}\n    </>\n  )\n}\n\nexport interface TableViewProps<\n  T extends Record<string, any>,\n  EK extends string,\n  Select extends keyof T = keyof T\n> extends SimpleTableProps<T, EK, Select> {\n  readonly data: ReadonlyArray<T>\n}\n\nfunction TableView<\n  T extends Record<string, any>,\n  Select extends keyof T,\n  EK extends string\n>(args: TableViewProps<T, EK, Select>): JSX.Element {\n  const {\n    select,\n    override,\n    extra,\n    data,\n    onRowClicked,\n    children,\n    ...props\n  } = args\n\n  if (data.length === 0) {\n    return <Text textSize=\"3\">No Values</Text>\n  }\n\n  const keys: ReadonlyArray<keyof T> =\n    select === undefined ? Object.keys(data[0]) : select\n\n  const labels: readonly string[] = [\n    ...keys.map(s =>\n      override && s in override\n        ? override[s as string]\n        : camelCaseToPhrase(s as string),\n    ),\n    ...(extra || []),\n  ]\n\n  return (\n    <Table {...props} fullWidth>\n      <SimpleTableHeader headers={labels} />\n\n      <TableBody>\n        <Rows\n          data={data}\n          select={keys}\n          extra={extra}\n          onRowClicked={onRowClicked}\n          render={children}\n        />\n      </TableBody>\n    </Table>\n  )\n}\n\nexport interface SimpleTableProps<\n  T extends Record<string, any>,\n  EK extends string,\n  Select extends keyof T = keyof T\n> extends TableProps {\n  readonly select?: ReadonlyArray<Select>\n  readonly override?: Partial<Record<Select, string>>\n  readonly extra?: readonly EK[]\n  readonly data: ReadonlyArray<T> | (() => Promise<ReadonlyArray<T>>)\n  onRowClicked?(value: RowClickEvent<T>): void\n  children?(key: keyof T | EK, value: T): React.ReactNode\n}\n\nexport function SimpleTable<\n  T extends Record<string, any>,\n  EK extends string,\n  Select extends keyof T = keyof T\n>(args: SimpleTableProps<T, EK, Select>): JSX.Element {\n  const { data, ...props } = args\n\n  return typeof data === 'function' ? (\n    <Get asyncFn={data}>{data => <TableView {...props} data={data} />}</Get>\n  ) : (\n    <TableView data={data} {...props} />\n  )\n}\n","import {\n  RoutedTabs,\n  RoutedTabsItem,\n  RoutedTabsProps,\n  Tabs,\n  TabsItem,\n  TabsProps,\n} from 'devfractal-ui'\nimport React from 'react'\nimport { camelCaseToPhrase } from 'technoidentity-utils'\n\nexport interface SimpleTabsProps extends Omit<TabsProps, 'selectedTab'> {\n  readonly name?: string\n  readonly values?: readonly string[]\n}\n\nexport const SimpleTabs: React.FC<SimpleTabsProps> = ({\n  name,\n  values = [],\n  ...props\n}) => {\n  const [value, set] = React.useState(values[0])\n  return (\n    <Tabs\n      {...props}\n      value={value}\n      onChange={evt => {\n        if (evt.value) {\n          set(evt.value)\n        }\n        if (props.onChange) {\n          props.onChange(evt)\n        }\n      }}\n      name={name}\n    >\n      {values.map(value => (\n        <TabsItem key={value} value={value}>\n          {camelCaseToPhrase(value)}\n        </TabsItem>\n      ))}\n    </Tabs>\n  )\n}\n\nexport interface SimpleRoutedTabsProps\n  extends Omit<RoutedTabsProps, 'selectedTab'> {\n  readonly name?: string\n  readonly values?: readonly string[]\n}\n\nexport const SimpleRoutedTabs: React.FC<SimpleRoutedTabsProps> = ({\n  values = [],\n  ...props\n}) => (\n  <RoutedTabs {...props}>\n    {values.map(value => (\n      <RoutedTabsItem key={value} value={value}>\n        {camelCaseToPhrase(value)}\n      </RoutedTabsItem>\n    ))}\n  </RoutedTabs>\n)\n"],"names":["SimpleArrayField","name","data","noRemove","onAdd","Component","render","React","FieldArray","unshift","remove","Field","addonsModifier","Button","variant","onClick","map","v","i","Notification","key","Delete","index","validator","initialSchema","validations","value","undefined","schema","forEach","validateSync","err","message","splitFieldProps","grouped","addons","horizontal","groupedMultiline","groupModifier","fieldSize","rest","size","SimpleInput","args","fieldProps","label","props","Label","camelCaseToPhrase","InputField","validate","ErrorField","SimpleDate","DateField","date","SimpleFormButtons","submit","reset","FormikConsumer","dirty","isSubmitting","handleReset","ButtonsGroup","type","disabled","noControl","typedForm","Text","string","Date","Number","number","Password","Email","Telephone","Url","Checkbox","children","noLabel","CheckboxField","RadioGroup","RadioGroupField","Select","SelectField","TextArea","TextAreaField","Form","initialValues","validationSchema","onSubmit","consoleSubmit","Formik","Simple","FormButtons","Debug","DebugField","NavBurger","NavbarBurger","role","NavBrand","NavbarBrand","NavLink","to","NavItem","NavbarItem","SimplePagerView","currentPage","maximumPages","onPageChange","Section","Icon","icon","faStepBackward","faAngleDoubleLeft","faAngleDoubleRight","faStepForward","formatDate","format","SimpleTableHeader","headers","TableHead","Tr","h","Th","Rows","select","extra","onRowClicked","Td","is","t","CheckBox","readOnly","checked","e","TableView","override","length","textSize","keys","Object","labels","s","Table","fullWidth","TableBody","SimpleTable","Get","asyncFn","SimpleTabs","values","useState","set","Tabs","onChange","evt","TabsItem","SimpleRoutedTabs","RoutedTabs","RoutedTabsItem"],"mappings":"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"}